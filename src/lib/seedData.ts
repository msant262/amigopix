import { 
  createUserWithEmailAndPassword,
  updateProfile,
  signInWithEmailAndPassword,
} from 'firebase/auth';
import { doc, setDoc, collection, addDoc } from 'firebase/firestore';
import { auth, db } from './firebase/config';

export const seedData = async () => {
  const stats = {
    admin: 0,
    clientes: 0,
    emprestimos: 0,
    pagamentos: 0,
    conteudos: 0
  };
  
  try {
    console.log('üå± Iniciando seed de dados...');
    console.log('üìä Criando dados de exemplo para teste do sistema...');
    console.log('üîß Verificando autentica√ß√£o atual:', auth.currentUser?.email || 'N√£o autenticado');

    // 1. Criar ou verificar usu√°rio administrador
    const adminEmail = 'admin@cyberflix.com';
    const adminPassword = 'admin123';
    
    console.log('üë§ Verificando/criando usu√°rio administrador...');
    
    let adminCredential;
    try {
      // Tentar criar o usu√°rio
      adminCredential = await createUserWithEmailAndPassword(auth, adminEmail, adminPassword);
      await updateProfile(adminCredential.user, { displayName: 'Administrador' });
      console.log('‚úÖ Novo administrador criado:', adminEmail);
    } catch (error: any) {
      if (error.code === 'auth/email-already-in-use') {
        console.log('‚ÑπÔ∏è Administrador j√° existe, fazendo login...');
        // Se j√° existe, fazer login
        adminCredential = await signInWithEmailAndPassword(auth, adminEmail, adminPassword);
        console.log('‚úÖ Login realizado com administrador existente');
      } else {
        throw error;
      }
    }
    
    await setDoc(doc(db, 'users', adminCredential.user.uid), {
      uid: adminCredential.user.uid,
      nome: 'Administrador',
      email: adminEmail,
      role: 'administrador',
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    console.log('‚úÖ Dados do administrador atualizados no Firestore');
    stats.admin = 1;

    // 2. Criar clientes
    console.log('üë• Criando clientes...');
    const clientes = [
      {
        nomeCompleto: 'Jo√£o Silva Santos',
        documento: '123.456.789-00',
        telefone: '(11) 99999-1111',
        email: 'joao@email.com',
        endereco: {
          rua: 'Rua das Flores',
          numero: '123',
          complemento: 'Apto 45',
          bairro: 'Centro',
          cidade: 'S√£o Paulo',
          estado: 'SP',
          cep: '01234-567',
        },
      },
      {
        nomeCompleto: 'Maria Oliveira Costa',
        documento: '987.654.321-00',
        telefone: '(21) 88888-2222',
        email: 'maria@email.com',
        endereco: {
          rua: 'Av. Paulista',
          numero: '456',
          bairro: 'Bela Vista',
          cidade: 'S√£o Paulo',
          estado: 'SP',
          cep: '01310-100',
        },
      },
      {
        nomeCompleto: 'Pedro Santos Lima',
        documento: '456.789.123-00',
        telefone: '(31) 77777-3333',
        email: 'pedro@email.com',
        endereco: {
          rua: 'Rua da Liberdade',
          numero: '789',
          complemento: 'Sobrado',
          bairro: 'Liberdade',
          cidade: 'Belo Horizonte',
          estado: 'MG',
          cep: '30112-000',
        },
      },
    ];

    const clienteRefs: string[] = [];
    for (const cliente of clientes) {
      try {
        const docRef = await addDoc(collection(db, 'clientes'), {
          ...cliente,
          createdAt: new Date(),
          updatedAt: new Date(),
        });
        clienteRefs.push(docRef.id);
        console.log('‚úÖ Cliente criado:', cliente.nomeCompleto);
        stats.clientes++;
      } catch (error) {
        console.error('‚ùå Erro ao criar cliente:', cliente.nomeCompleto, error);
        throw error;
      }
    }
    console.log(`üìä Clientes criados: ${stats.clientes}/${clientes.length}`);

    // 3. Criar empr√©stimos com datas variadas para testar filtros
    console.log('üí≥ Criando empr√©stimos...');
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000);
    const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);
    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    
    const emprestimos = [
      {
        clienteId: clienteRefs[0],
        principal: 5000,
        taxaJuros: 2.5,
        periodicidadeJuros: 'mensal' as const,
        tipoJuros: 'composto' as const,
        dataInicio: oneDayAgo, // Empr√©stimo de ontem - aparece no filtro "1 dia"
        dataVencimento: new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000),
        parcelas: 6,
        status: 'ativo' as const,
        saldoDevedor: 3500,
        jurosAcumulado: 875,
        valorTotal: 5875,
        ultimaAtualizacao: new Date(),
        observacoes: 'Empr√©stimo para reforma da casa',
      },
      {
        clienteId: clienteRefs[1],
        principal: 3000,
        taxaJuros: 3.0,
        periodicidadeJuros: 'mensal' as const,
        tipoJuros: 'simples' as const,
        dataInicio: threeDaysAgo, // Empr√©stimo de 3 dias atr√°s - aparece no filtro "7 dias"
        dataVencimento: new Date(now.getTime() + 20 * 24 * 60 * 60 * 1000),
        parcelas: 3,
        status: 'ativo' as const,
        saldoDevedor: 3000,
        jurosAcumulado: 270,
        valorTotal: 3270,
        ultimaAtualizacao: new Date(),
        observacoes: 'Empr√©stimo pessoal',
      },
      {
        clienteId: clienteRefs[2],
        principal: 8000,
        taxaJuros: 2.0,
        periodicidadeJuros: 'anual' as const,
        tipoJuros: 'composto' as const,
        dataInicio: oneWeekAgo, // Empr√©stimo de 1 semana atr√°s - aparece no filtro "7 dias" e "30 dias"
        dataVencimento: new Date(now.getTime() + 45 * 24 * 60 * 60 * 1000),
        parcelas: 12,
        status: 'quitado' as const,
        saldoDevedor: 0,
        jurosAcumulado: 160,
        valorTotal: 8160,
        ultimaAtualizacao: new Date(),
        observacoes: 'Empr√©stimo empresarial',
      },
      {
        clienteId: clienteRefs[0],
        principal: 2000,
        taxaJuros: 4.0,
        periodicidadeJuros: 'mensal' as const,
        tipoJuros: 'simples' as const,
        dataInicio: twoWeeksAgo, // Empr√©stimo de 2 semanas atr√°s - aparece no filtro "30 dias"
        dataVencimento: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000), // Vencido h√° 5 dias
        status: 'atrasado' as const,
        saldoDevedor: 2000,
        jurosAcumulado: 160,
        valorTotal: 2160,
        ultimaAtualizacao: new Date(),
        observacoes: 'Empr√©stimo de emerg√™ncia',
      },
      {
        clienteId: clienteRefs[1],
        principal: 4500,
        taxaJuros: 2.8,
        periodicidadeJuros: 'mensal' as const,
        tipoJuros: 'composto' as const,
        dataInicio: oneMonthAgo, // Empr√©stimo de 1 m√™s atr√°s - aparece no filtro "30 dias" e "90 dias"
        dataVencimento: new Date(now.getTime() + 60 * 24 * 60 * 60 * 1000),
        parcelas: 8,
        status: 'ativo' as const,
        saldoDevedor: 4500,
        jurosAcumulado: 630,
        valorTotal: 5130,
        ultimaAtualizacao: new Date(),
        observacoes: 'Empr√©stimo para investimento',
      },
    ];

    const emprestimoRefs: string[] = [];
    for (const emprestimo of emprestimos) {
      try {
        const docRef = await addDoc(collection(db, 'emprestimos'), emprestimo);
        emprestimoRefs.push(docRef.id);
        console.log('‚úÖ Empr√©stimo criado:', emprestimo.principal);
        stats.emprestimos++;
      } catch (error) {
        console.error('‚ùå Erro ao criar empr√©stimo:', emprestimo.principal, error);
        throw error;
      }
    }
    console.log(`üìä Empr√©stimos criados: ${stats.emprestimos}/${emprestimos.length}`);

    // 4. Criar alguns pagamentos
    console.log('üí∞ Criando pagamentos...');
    const pagamentos = [
      {
        emprestimoId: emprestimoRefs[0], // Primeiro empr√©stimo
        data: new Date('2024-02-15'),
        valor: 1500,
        principalPago: 1000,
        jurosPago: 500,
        metodo: 'pix' as const,
        observacoes: 'Primeira parcela',
      },
      {
        emprestimoId: emprestimoRefs[0], // Primeiro empr√©stimo
        data: new Date('2024-03-15'),
        valor: 1500,
        principalPago: 1100,
        jurosPago: 400,
        metodo: 'pix' as const,
        observacoes: 'Segunda parcela',
      },
      {
        emprestimoId: emprestimoRefs[1], // Segundo empr√©stimo
        data: new Date('2024-02-20'),
        valor: 1000,
        principalPago: 800,
        jurosPago: 200,
        metodo: 'ted' as const,
        observacoes: 'Primeira parcela',
      },
      {
        emprestimoId: emprestimoRefs[2], // Terceiro empr√©stimo
        data: new Date('2024-02-10'),
        valor: 8000,
        principalPago: 7500,
        jurosPago: 500,
        metodo: 'pix' as const,
        observacoes: 'Quita√ß√£o antecipada',
      },
    ];

    for (const pagamento of pagamentos) {
      try {
        await addDoc(collection(db, 'pagamentos'), pagamento);
        console.log('‚úÖ Pagamento criado:', pagamento.valor);
        stats.pagamentos++;
      } catch (error) {
        console.error('‚ùå Erro ao criar pagamento:', pagamento.valor, error);
        throw error;
      }
    }
    console.log(`üìä Pagamentos criados: ${stats.pagamentos}/${pagamentos.length}`);

    // 5. Criar conte√∫dos
    console.log('üìö Criando conte√∫dos...');
    const conteudos = [
      {
        tipo: 'video' as const,
        titulo: 'Como funciona o sistema de empr√©stimos',
        descricao: 'V√≠deo explicativo sobre o funcionamento do sistema de empr√©stimos CyberFlix',
        urlStorageOuEmbed: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
        autor: adminCredential.user.uid,
        autorNome: 'Administrador',
        visibilidade: 'publico' as const,
        tags: ['tutorial', 'sistema', 'emprestimos'],
        ordem: 1,
        publicadoEm: new Date(),
      },
      {
        tipo: 'texto' as const,
        titulo: 'Pol√≠tica de Empr√©stimos',
        descricao: 'Documento com as pol√≠ticas e regras para concess√£o de empr√©stimos',
        urlStorageOuEmbed: `POL√çTICA DE EMPR√âSTIMOS CYBERFLIX

1. REQUISITOS B√ÅSICOS
- Idade m√≠nima: 18 anos
- Documenta√ß√£o completa (CPF/CNPJ, RG, comprovante de renda)
- An√°lise de cr√©dito aprovada

2. TAXAS DE JUROS
- Taxa b√°sica: 2% ao m√™s
- Taxa reduzida para clientes premium: 1.5% ao m√™s
- Taxa de juros simples ou composto

3. PRAZOS
- M√≠nimo: 1 m√™s
- M√°ximo: 24 meses
- Renegocia√ß√£o dispon√≠vel

4. FORMAS DE PAGAMENTO
- PIX (desconto de 2%)
- Transfer√™ncia banc√°ria
- Dinheiro
- Cart√£o de cr√©dito

5. PENALIDADES
- Atraso: 2% ao m√™s sobre o valor em atraso
- Juros de mora: 1% ao m√™s
- Protesto ap√≥s 90 dias de atraso`,
        autor: adminCredential.user.uid,
        autorNome: 'Administrador',
        visibilidade: 'publico' as const,
        tags: ['politica', 'regras', 'emprestimos'],
        ordem: 2,
        publicadoEm: new Date(),
      },
      {
        tipo: 'imagem' as const,
        titulo: 'Fluxo de Aprova√ß√£o de Empr√©stimos',
        descricao: 'Infogr√°fico explicando o processo de aprova√ß√£o de empr√©stimos',
        urlStorageOuEmbed: 'https://via.placeholder.com/800x600/1f2937/ffffff?text=Fluxo+de+Aprova√ß√£o',
        autor: adminCredential.user.uid,
        autorNome: 'Administrador',
        visibilidade: 'administradores' as const,
        tags: ['processo', 'aprovacao', 'fluxo'],
        ordem: 3,
        publicadoEm: new Date(),
      },
    ];

    for (const conteudo of conteudos) {
      try {
        await addDoc(collection(db, 'conteudos'), conteudo);
        console.log('‚úÖ Conte√∫do criado:', conteudo.titulo);
        stats.conteudos++;
      } catch (error) {
        console.error('‚ùå Erro ao criar conte√∫do:', conteudo.titulo, error);
        throw error;
      }
    }
    console.log(`üìä Conte√∫dos criados: ${stats.conteudos}/${conteudos.length}`);

    console.log('üéâ Seed de dados conclu√≠do com sucesso!');
    console.log('\nüìã Dados criados:');
    console.log(`üë§ ${stats.admin} Administrador (admin@cyberflix.com / admin123)`);
    console.log(`üë• ${stats.clientes} Clientes`);
    console.log(`üí≥ ${stats.emprestimos} Empr√©stimos (com datas variadas para testar filtros)`);
    console.log(`üí∞ ${stats.pagamentos} Pagamentos`);
    console.log(`üìö ${stats.conteudos} Conte√∫dos`);
    console.log('\nüîë Credenciais do administrador:');
    console.log('Email: admin@cyberflix.com');
    console.log('Senha: admin123');
    console.log('\nüß™ Dados de teste para filtros:');
    console.log('‚Ä¢ 1 empr√©stimo de ontem (filtro "1 dia")');
    console.log('‚Ä¢ 2 empr√©stimos dos √∫ltimos 7 dias (filtro "7 dias")');
    console.log('‚Ä¢ 4 empr√©stimos dos √∫ltimos 30 dias (filtro "30 dias")');
    console.log('‚Ä¢ 5 empr√©stimos total (filtro "todos")');
    console.log('\n‚ú® Sistema pronto para testes!');

  } catch (error) {
    console.error('‚ùå Erro ao criar dados de exemplo:', error);
  }
};

// Fun√ß√£o para executar o seed (descomente para usar)
// seedData();
